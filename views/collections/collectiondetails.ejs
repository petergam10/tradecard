<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>
        <%= collection.name %> by <%= collection.ownerDisplayName %>
    </title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="icon" type="image/png" href="/images/logo.png">
</head>

<body>

    <%- include('../partials/header.ejs') %>

        <main class="mt-3">
            <div class="container">

                <% if (user!=collection.user_id && user) { %>
                    <div class="d-flex row align-items-center">

                        <% if (userCollectionRating==undefined) { %>
                            <!-- Rate Button -->
                            <div class="col-auto">
                                <button class="btn btn-outline-success"
                                    data-collectionid="<%= collection.id %>" id="rateCollectionBtn">
                                    Rate this collection
                                </button>
                            </div>
                            <% } else { %>
                                <!-- Change Rating Button -->
                                You rated <%= parseFloat(userCollectionRating.value).toFixed(2) %> out of 5
                                    <div class="col-auto">
                                        <button class="btn btn-outline-success"
                                            data-collectionid="<%= collection.id %>" id="rateCollectionBtn">
                                            Change rating
                                        </button>
                                    </div>
                                    <% } %>

                                        <!-- Add Comment Button -->
                                        <div class="col-auto">
                                            <button class="btn btn-outline-secondary" id="addCommentBtn">
                                                Add a comment
                                            </button>
                                        </div>
                    </div>
                    <% } %>

                        <div class="my-3 fw-medium">
                            <%= collection.name %> by <%= collection.ownerDisplayName %>
                        </div>

                        <div>
                            Rated: <% if (collection.averageRating !==undefined && collection.averageRating !==null) {
                                %>
                                Average Rating: <%= parseFloat(collection.averageRating).toFixed(2) %>
                                    <% } else { %>
                                        Not yet rated
                                        <% } %>
                        </div>

                        <div class="my-3 fw-medium">
                            <% const startCard=((currentPage - 1) * limit) + 1; %>
                                <% const endCard=Math.min(currentPage * limit, totalRecords); %>
                                    <%= startCard %> - <%= endCard %> of <%= totalRecords %> cards
                        </div>

                        <hr>

                        <!-- Filters -->
                        <div class="row align-items-center mb-3">
                            <!-- Sort By -->
                            <div class="col-md-auto d-flex align-items-center my-2">
                                <label for="sortBy" class="me-2">Sort by</label>
                                <div class="flex-grow-1">
                                    <select class="form-select" id="sortBy">
                                        <option value="name ASC" selected>Card name (A-Z)</option>
                                        <option value="name DESC">Card name (Z-A)</option>
                                        <option value="rarity ASC">Rarity (asc)</option>
                                        <option value="rarity DESC">Rarity (desc)</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Page Limit Dropdown -->
                            <div class="col-md-auto d-flex align-items-center my-2">
                                <label for="pageLimitSelect" class="me-2">Page Limit</label>
                                <div class="flex-grow-1">
                                    <select class="form-select" id="pageLimitSelect" aria-label="Page Limit Select">
                                        <option value="25" selected>25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                    </select>
                                </div>
                            </div>

                        </div>

                        <div class="row row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 row-cols-xxl-6 g-2">
                            <% cardsList.slice(0, limit).forEach((card)=> { %>
                                <!-- This renders an individual card -->
                                <%- include('../partials/card.ejs', { card }) %>
                                    <% }); %>
                        </div>


                        <!-- This renders pagination -->
                        <%- include('../partials/pagination.ejs', { currentPage, totalPages}) %>

                        <!-- Comments Section -->
                        Comments Section
                        <% collectionComments.forEach((comment)=> { %>
                            <div>
                                <%= comment.ownerDisplayName %>
                                <%= comment.created_at %>
                                <%= comment.text %>
                                <% }); %>
                            </div>
                            

                            <!-- Modal form to rate collection -->
                            <div class="modal fade" id="rateCollectionModal" tabindex="-1">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Rate this collection</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal"
                                                aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">

                                            <form id="rateCollectionForm" action="/collections/add-collection-rating"
                                                method="POST">
                                                <input type="hidden" id="collectionID" name="collectionID"
                                                    value="<%= collection.id %>">
                                                <input type="hidden" id="userID" name="userID" value="<%= user %>">

                                                <div>
                                                    <label for="collectionRating" class="form-label">Rate Collection
                                                        (0-5)</label>
                                                    <input type="range" class="form-range" id="collectionRating"
                                                        name="collectionRating" min="0" max="5" step="0.1" required>
                                                    <output for="collectionRating" id="ratingValue">2.5</output>
                                                </div>

                                                <div id="ratingHelp" class="form-text mb-3">
                                                    Slide to select a rating between 0 and 5.
                                                </div>

                                                <button type="submit" class="btn btn-primary">Rate Collection</button>

                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Add Comment Modal -->
                            <div class="modal fade" id="addCommentModal" tabindex="-1">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Add Comment</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal"
                                                aria-label="Close"></button>
                                        </div>

                                        <div class="modal-body">
                                            <!-- Form to add a comment to a collection -->
                                            <form id="addCommentForm" action="/collections/add-comment" method="POST">
                                                <div class="mb-3">
                                                    <label for="commentText" class="form-label">Your Comment</label>
                                                    <input type="text" class="form-control" id="commentText"
                                                        name="commentText" required>
                                                </div>
                                                <!-- Hidden input fields for user ID and collection ID -->
                                                <input type="hidden" id="userId" name="userId" value="<%= user %>">
                                                <input type="hidden" id="collectionId" name="collectionId"
                                                    value="<%= collection.id %>">
                                                <button type="submit" class="btn btn-primary">Add Comment</button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </div>
            </div>
        </main>

        <%- include('../partials/footer.ejs') %>

            <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
            <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
            <!-- Bootstrap Bundle with Popper.js -->
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
                integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
                crossorigin="anonymous"></script>

            <script>
                $(document).ready(function () {

                    let sortBy = 'name ASC'; // Variable to store the current sort value
                    let currentPage = 1; // Variable to store the current page
                    let selectedLimit = 25; // Variable to store the selected page limit

                    // Function to update the URL based on filter values
                    function updateURL() {
                        const urlParams = new URLSearchParams(window.location.search);
                        urlParams.set('sort', sortBy);
                        urlParams.set('page', currentPage);
                        urlParams.set('limit', selectedLimit);
                        window.location.search = urlParams.toString(); // Update the URL
                    }

                    // Function to update the sets count based on displayed sets
                    function updateCardsCount() {
                        const cardsCount = $('.row a').length; // Get the number of sets displayed
                        $('#cardsCount').text(`${cardsCount} Cards`); // Update the header text
                    }

                    // Call the function initially and whenever sets are updated
                    updateCardsCount();

                    const urlParams = new URLSearchParams(window.location.search);
                    sortBy = urlParams.get('sort') || 'name ASC';
                    currentPage = parseInt(urlParams.get('page')) || 1;
                    selectedLimit = parseInt(urlParams.get('limit')) || 25;

                    $('#sortBy').val(sortBy);
                    $('#pageLimitSelect').val(selectedLimit);

                    $('#sortBy').change(function () {
                        sortBy = $(this).val();
                        currentPage = 1; // Reset page to 1 when sorting changes
                        updateURL();
                        updateCardsCount();
                    });

                    $('#pageLimitSelect').change(function () {
                        selectedLimit = $(this).val();
                        currentPage = 1; // Reset page to 1 when page limit changes
                        updateURL();
                        updateCardsCount();
                    });

                    $('.pagination-link').click(function (e) {
                        e.preventDefault();
                        currentPage = $(this).data('page');
                        updateURL();
                        updateCardsCount();
                    });



                    // ADD TO COLLECTION BUTTON
                    $(document).on('click', '.add-to-collection-btn', async function () {
                        const button = $(this); // Reference to the button clicked
                        const cardId = button.data('cardid');
                        console.log("Button clicked to add card ID:", cardId);

                        try {
                            const response = await fetch("/cards/add-to-collection", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({
                                    cardId: cardId
                                }), // Pass cardId as an object in the body
                            });

                            if (response.ok) {
                                const data = await response.json();
                                console.log("Card added to collection:", data);

                                button.text('Remove from collection');
                                button.removeClass('btn-outline-success');
                                button.addClass('btn-outline-danger');
                                button.removeClass('add-to-collection-btn');
                                button.addClass('remove-from-collection-btn');
                            } else {
                                console.error("Failed to add card to collection:", response.statusText);
                                // Handle error response if needed
                            }
                        } catch (error) {
                            console.error("Error adding card to collection:", error);
                            // Handle network or other errors
                        }
                    });

                    // REMOVE FROM COLLECTION BUTTON
                    $(document).on('click', '.remove-from-collection-btn', async function () {
                        const button = $(this); // Reference to the button clicked
                        const cardId = button.data('cardid');
                        console.log("Button clicked to remove card ID:", cardId);

                        try {
                            console.log('Trying to fetch route...');
                            const response = await fetch("/cards/remove-from-collection", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({
                                    cardId: cardId
                                }), // Pass cardId as an object in the body
                            });

                            if (response.ok) {
                                const data = await response.json();
                                console.log("Card removed from collection:", data);

                                button.text('Add to collection');
                                button.addClass('btn-outline-success');
                                button.removeClass('btn-outline-danger');
                                button.addClass('add-to-collection-btn');
                                button.removeClass('remove-from-collection-btn');
                            } else {
                                console.error("Failed to remove card from collection:", response.statusText);
                                // Handle error response if needed
                            }
                        } catch (error) {
                            console.error("Error removing card from collection:", error);
                            // Handle network or other errors
                        }
                    });
                });

                // ADD TO WISHLIST BUTTON
                $(document).on('click', '.add-to-wishlist-btn', async function () {
                    const button = $(this); // Reference to the button clicked
                    const cardId = button.data('cardid');
                    console.log("Button clicked to add to wishlist card ID:", cardId);

                    try {
                        const response = await fetch("/cards/add-to-wishlist", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({
                                cardId: cardId
                            }), // Pass cardId as an object in the body
                        });

                        if (response.ok) {
                            const data = await response.json();
                            console.log("Card added to wishlist:", data);

                            button.removeClass('btn-outline-success');
                            button.addClass('btn-outline-danger');
                            button.removeClass('add-to-wishlist-btn');
                            button.addClass('remove-from-wishlist-btn');
                        } else {
                            console.error("Failed to add card to wishlist:", response.statusText);
                            // Handle error response if needed
                        }
                    } catch (error) {
                        console.error("Error adding card to wishlist:", error);
                        // Handle network or other errors
                    }
                });

                // REMOVE FROM WISHLIST BUTTON
                $(document).on('click', '.remove-from-wishlist-btn', async function () {
                    const button = $(this); // Reference to the button clicked
                    const cardId = button.data('cardid');
                    console.log("Button clicked to remove from wishlist card ID:", cardId);

                    try {
                        console.log('Trying to fetch route...');
                        const response = await fetch("/cards/remove-from-wishlist", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({
                                cardId: cardId
                            }), // Pass cardId as an object in the body
                        });

                        if (response.ok) {
                            const data = await response.json();
                            console.log("Card removed from wishlist:", data);

                            button.addClass('btn-outline-success');
                            button.removeClass('btn-outline-danger');
                            button.removeClass('remove-from-wishlist-btn');
                            button.addClass('add-to-wishlist-btn');
                        } else {
                            console.error("Failed remove card from wishlist:", response.statusText);
                            // Handle error response if needed
                        }
                    } catch (error) {
                        console.error("Error removing card from wishlist:", error);
                        // Handle network or other errors
                    }
                });

                // Get the range input and output element
                const rangeInput = document.getElementById('collectionRating');
                const outputValue = document.getElementById('ratingValue');

                // Add event listener to update output value on input change
                rangeInput.addEventListener('input', function () {
                    outputValue.textContent = this.value; // Update the output text content with the current value
                });

                document.addEventListener('DOMContentLoaded', function () {
                    // RATE BUTTON
                    document.getElementById('rateCollectionBtn').addEventListener('click', function () {
                        $('#rateCollectionModal').modal('show');
                    });

                    // ADD COMMENT BUTTON
                    document.getElementById('addCommentBtn').addEventListener('click', function () {
                        $('#addCommentModal').modal('show');
                    });
                });


            </script>
</body>

</html>