<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Cards</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <style>
        .card-img-custom-2 {
            height: 300px;
            width: 100%;
            border-radius: .375rem;
        }

        .symbol-img {
            height: 35px;
            object-fit: fill;
        }
    </style>
</head>

<body>

    <%- include('../partials/header.ejs') %>

        <main class="mt-3">
            <div class="container">

                <div class="row align-items-center">

                    <!-- Search Bar -->
                    <div class="col-auto position-relative">
                        <form action="/cards" method="GET" class="d-flex">
                            <div class="input-group">
                                <span class="input-group-text">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                        class="bi bi-search" viewBox="0 0 16 16">
                                        <path
                                            d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                                    </svg>
                                </span>
                                <input class="form-control" type="text" id="search" name="query"
                                    placeholder="Search cards..." value="<%= currentQuery %>">
                            </div>
                            <input type="hidden" name="sort" value="<%= currentSort %>">
                        </form>
                    </div>

                </div>

                <div class="my-3 fw-medium">
                    <% const startCard=((currentPage - 1) * limit) + 1; %>
                        <% const endCard=Math.min(currentPage * limit, totalRecords); %>

                            <%= startCard %> - <%= endCard %> of <%= totalRecords %> cards
                </div>

                <hr>

                <!-- Filters -->
                <div class="row align-items-center mb-3">
                    <!-- Sort By -->
                    <div class="col-md-auto d-flex align-items-center my-2">
                        <label for="sortBy" class="me-2">Sort by</label>
                        <div class="flex-grow-1">
                            <select class="form-select" id="sortBy">
                                <option value="name ASC" selected>Card name (A-Z)</option>
                                <option value="name DESC">Card name (Z-A)</option>
                                <option value="rarity ASC">Rarity (asc)</option>
                                <option value="rarity DESC">Rarity (desc)</option>
                            </select>
                        </div>
                    </div>

                    <!-- Page Limit Dropdown -->
                    <div class="col-md-auto d-flex align-items-center my-2">
                        <label for="pageLimitSelect" class="me-2">Page Limit</label>
                        <div class="flex-grow-1">
                            <select class="form-select" id="pageLimitSelect" aria-label="Page Limit Select">
                                <option value="25" selected>25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </div>
                    </div>

                </div>

                <div class="row row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 row-cols-xxl-6 g-2">
                    <% cardsList.slice(0, limit).forEach((card)=> { %>
                        <div class="card-container">
                            <a href="/cards/<%= card.id %>">
                                <% if (card.image) { %>
                                    <img src="<%= card.image %>" class="card-img-custom-2" alt="<%= card.image %> Logo">
                                    <% } %>
                            </a>
                            <div>
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <%= card.rarity %>
                                    </div>
                                    <div>
                                        <%= card.name %>
                                    </div>
                                    <div>

                                    </div>
                                </div>
                                <div class="buttons-container d-flex justify-content-evenly"
                                    data-cardid="<%= card.id %>">
                                    <% if (userCollection.includes(card.id)) { %>
                                        <button class="btn btn-outline-danger remove-from-collection-btn"
                                            data-cardid="<%= card.id %>">
                                            Remove from Collection
                                        </button>
                                        <% } else { %>
                                            <button class="btn btn-outline-success add-to-collection-btn"
                                                data-cardid="<%= card.id %>">
                                                Add to Collection
                                            </button>
                                            <% } %>
                                </div>
                            </div>
                        </div>
                        <% }); %>
                </div>


                <% if (totalPages <=10) { %>
                    <!-- Simple pagination for <= 10 pages -->
                    <% } else { %>
                        <!-- Complex pagination for > 10 pages -->
                        <nav aria-label="Page navigation example" class="my-3">
                            <ul class="pagination justify-content-center">
                                <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                                    <a href="#" class="page-link pagination-link"
                                        data-page="<%= currentPage - 1 %>">Previous</a>
                                </li>
                                <li class="page-item <%= currentPage === 1 ? 'active' : '' %>">
                                    <a href="#" class="page-link pagination-link" data-page="1">1</a>
                                </li>
                                <% if (currentPage> 4) { %>
                                    <li class="page-item">
                                        <a href="#" class="page-link pagination-link disabled">...</a>
                                    </li>
                                    <% } %>
                                        <% for (let i=Math.max(2, currentPage - 3); i <=Math.min(currentPage + 3,
                                            totalPages); i++) { %>
                                            <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                                <a href="#" class="page-link pagination-link" data-page="<%= i %>">
                                                    <%= i %>
                                                </a>
                                            </li>
                                            <% } %>
                                                <% if (currentPage < totalPages - 3) { %>
                                                    <li class="page-item">
                                                        <a href="#" class="page-link pagination-link disabled">...</a>
                                                    </li>
                                                    <li
                                                        class="page-item <%= currentPage === totalPages ? 'active' : '' %>">
                                                        <a href="#" class="page-link pagination-link"
                                                            data-page="<%= totalPages %>">
                                                            <%= totalPages %>
                                                        </a>
                                                    </li>
                                                    <% } %>
                                                        <li
                                                            class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                                                            <a href="#" class="page-link pagination-link"
                                                                data-page="<%= currentPage + 1 %>">Next</a>
                                                        </li>
                            </ul>
                        </nav>
                        <% } %>
            </div>
        </main>

        <%- include('../partials/footer.ejs') %>

            <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
            <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
            <!-- Bootstrap Bundle with Popper.js -->
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
                integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
                crossorigin="anonymous"></script>

            <script>
                $(document).ready(function () {
                    let sortBy = ''; // Variable to store the current sort value
                    let currentQuery = ''; // Variable to store the current query value
                    let currentPage = 1; // Variable to store the current page
                    let selectedLimit = 25; // Variable to store the selected page limit
                    let typingTimer; // Timer identifier
                    const doneTypingInterval = 1000; // Time in milliseconds (0.5 seconds)

                    // Function to update the URL based on filter values
                    function updateURL() {
                        const urlParams = new URLSearchParams(window.location.search);
                        urlParams.set('sort', sortBy);
                        urlParams.set('query', currentQuery);
                        urlParams.set('page', currentPage);
                        urlParams.set('limit', selectedLimit);

                        window.location.search = urlParams.toString(); // Update the URL
                    }

                    // Function to update the sets count based on displayed sets
                    function updateCardsCount() {
                        const cardsCount = $('.row a').length; // Get the number of sets displayed
                        $('#cardsCount').text(`${cardsCount} Cards`); // Update the header text
                    }

                    // Call the function initially and whenever sets are updated
                    updateCardsCount();

                    const urlParams = new URLSearchParams(window.location.search);
                    sortBy = urlParams.get('sort') || 'name ASC';
                    currentQuery = urlParams.get('query') || '';
                    currentPage = parseInt(urlParams.get('page')) || 1;
                    selectedLimit = parseInt(urlParams.get('limit')) || 25;


                    $('#sortBy').val(sortBy);
                    $('#search').val(currentQuery);
                    $('#pageLimitSelect').val(selectedLimit);

                    $('#sortBy').change(function () {
                        sortBy = $(this).val();
                        currentPage = 1; // Reset page to 1 when sorting changes
                        updateURL();
                        updateCardsCount();
                    });

                    $('#search').on('input', function () {
                        clearTimeout(typingTimer); // Clear the previous timer
                        currentQuery = $(this).val();
                        typingTimer = setTimeout(function () {
                            currentPage = 1; // Reset page to 1 when search changes
                            updateURL();
                            updateCardsCount();
                        }, doneTypingInterval);
                    });

                    $('.pagination-link').click(function (e) {
                        e.preventDefault();
                        currentPage = $(this).data('page');
                        updateURL();
                        updateCardsCount();
                    });

                    $('#pageLimitSelect').change(function () {
                        selectedLimit = $(this).val();
                        currentPage = 1; // Reset page to 1 when page limit changes
                        updateURL();
                        updateCardsCount();
                    });

                    $(document).on('click', '.add-to-collection-btn', async function () {
                        const button = $(this); // Reference to the button clicked
                        const cardId = button.data('cardid');
                        console.log("Button clicked to add card ID:", cardId);

                        try {
                            console.log('Trying to fetch route...');
                            const response = await fetch("/cards/add-to-collection", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({ cardId: cardId }),  // Pass cardId as an object in the body
                            });

                            if (response.ok) {
                                const data = await response.json();
                                console.log("Card added to collection:", data);

                                button.text('Remove from collection');
                                button.removeClass('btn-outline-success');
                                button.addClass('btn-outline-danger');
                                button.removeClass('add-to-collection-btn');
                                button.addClass('remove-from-collection-btn');
                            } else {
                                console.error("Failed to add card to collection:", response.statusText);
                                // Handle error response if needed
                            }
                        } catch (error) {
                            console.error("Error adding card to collection:", error);
                            // Handle network or other errors
                        }
                    });

                    $(document).on('click', '.remove-from-collection-btn', async function () {
                        const button = $(this); // Reference to the button clicked
                        const cardId = button.data('cardid');
                        console.log("Button clicked to remove card ID:", cardId);

                        try {
                            console.log('Trying to fetch route...');
                            const response = await fetch("/cards/remove-from-collection", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({ cardId: cardId }),  // Pass cardId as an object in the body
                            });

                            if (response.ok) {
                                const data = await response.json();
                                console.log("Card removed from collection:", data);

                                button.text('Add to collection');
                                button.addClass('btn-outline-success');
                                button.removeClass('btn-outline-danger');
                                button.addClass('add-to-collection-btn');
                                button.removeClass('remove-from-collection-btn');
                            } else {
                                console.error("Failed to remove card from collection:", response.statusText);
                                // Handle error response if needed
                            }
                        } catch (error) {
                            console.error("Error removing card from collection:", error);
                            // Handle network or other errors
                        }
                    });
                });
            </script>
</body>

</html>